Select: определяет проекцию выбранных значений

Where: определяет фильтр выборки

OrderBy: упорядочивает элементы по возрастанию

OrderByDescending: упорядочивает элементы по убыванию

ThenBy: задает дополнительные критерии для упорядочивания элементов возрастанию

ThenByDescending: задает дополнительные критерии для упорядочивания элементов по убыванию

Join: соединяет две коллекции по определенному признаку

GroupBy: группирует элементы по ключу

ToLookup: группирует элементы по ключу, при этом все элементы добавляются в словарь

GroupJoin: выполняет одновременно соединение коллекций и группировку элементов по ключу

Reverse: располагает элементы в обратном порядке

All: определяет, все ли элементы коллекции удовлятворяют определенному условию

Any: определяет, удовлетворяет хотя бы один элемент коллекции определенному условию

Contains: определяет, содержит ли коллекция определенный элемент

Distinct: удаляет дублирующиеся элементы из коллекции

Except: возвращает разность двух коллекцию, то есть те элементы, которые создаются только в одной коллекции

Union: объединяет две однородные коллекции

Intersect: возвращает пересечение двух коллекций, то есть те элементы, которые встречаются в обоих коллекциях

Count: подсчитывает количество элементов коллекции, которые удовлетворяют определенному условию

Sum: подсчитывает сумму числовых значений в коллекции

Average: подсчитывает cреднее значение числовых значений в коллекции

Min: находит минимальное значение

Max: находит максимальное значение

Take: выбирает определенное количество элементов

Skip: пропускает определенное количество элементов

TakeWhile: возвращает цепочку элементов последовательности, до тех пор, пока условие истинно

SkipWhile: пропускает элементы в последовательности, пока они удовлетворяют заданному условию, и затем возвращает оставшиеся элементы

Concat: объединяет две коллекции

Zip: объединяет две коллекции в соответствии с определенным условием

First: выбирает первый элемент коллекции

FirstOrDefault: выбирает первый элемент коллекции или возвращает значение по умолчанию

Single: выбирает единственный элемент коллекции, если коллекция содердит больше или меньше одного элемента, то генерируется исключение

SingleOrDefault: выбирает первый элемент коллекции или возвращает значение по умолчанию

ElementAt: выбирает элемент последовательности по определенному индексу

ElementAtOrDefault: выбирает элемент коллекции по определенному индексу или возвращает значение по умолчанию, если индекс вне допустимого диапазона

Last: выбирает последний элемент коллекции

LastOrDefault: выбирает последний элемент коллекции или возвращает значение по умолчанию





Заметки: 

*запросы LINQ часто являются отложенными и не
выполняются сразу при вызове.

*приоритетнее использовать метод TypeOf, чем просто Cast. Потому что при использовании Cast необходимо иметь коллекцию с элементами одинакового типа, в противном случае,
на элемент с другим типом будет генерироваться исключение. В TypeOf такого нет.

* int[] oddNums = // использование именованного метода
 Common.FilterArrayOfInts(nums, Application.IsOdd);
int[] oddNums = // использование анонимного метода
 Common.FilterArrayOfInts(nums, delegate(int i){return((i & 1) == 1);});
int[] oddNums = // использование лямбда-выражения
 Common.FilterArrayOfInts(nums, i => ((i & 1) == 1));

* Это еще одно правило: частичные методы должны возвращать void.

* Правила
К сожалению, существуют ряд правил, которым подчиняются частичные методы.
Ниже приведен их список.
• Частичные методы должны быть определены только в частичных классах.
• В частичных методах должен быть указан модификатор partial.
• Частичные методы являются приватными, но в них не должен указываться модификатор private, иначе компилятор выдаст ошибку.
• Частичные методы должны возвращать void.
• Частичные методы могут не иметь реализации.
• Частичные методы должны быть статическими.
• Частичные методы могут иметь аргументы.

* Для чего нужен метод Format: 
string output = String.Format("Имя: {0}  Возраст: {1}", person.Name, person.Age);
Console.WriteLine(output);

*






Методы: 

* Cast<тип переменных>() - Cast пытается привести все
элементы в коллекции к указанному типу, помещая их в выходную последовательность. Если в коллекции есть объект типа, который не может быть приведен к указанному,
генерируется исключение. 

* OfType<тип переменных> - пытается поместить в выходную последовательность только те элементы, которые могут быть приведены к указанному типу. |

* Skip() - пропускает заданное кол-во элементов. 

* Take - рассматривает заданное кол-во элементов.

* TakeWhile рассматривает заданное кол-вол элементов, пока..(условие), либо до определенного количества.

* SkipWhile - пропускает определенное кол-во элементов, пока..(условие), либо до определенного количества.

* .Concat() - соездиняе две последовательности в одну. Одна перед методам, вторая в скобочках.

* OrderBy - упорядовачивает элементы по возрастанию.

* OrderByDescending - упорядовачивает элементы по убыванию.

* 
	